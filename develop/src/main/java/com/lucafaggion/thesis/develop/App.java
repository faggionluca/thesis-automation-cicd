/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.lucafaggion.thesis.develop;

import java.io.IOException;
// import java.util.*;
import java.time.Duration;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import com.github.dockerjava.core.DockerClientConfig;
import com.github.dockerjava.core.DockerClientImpl;
import com.github.dockerjava.api.DockerClient;
import com.github.dockerjava.api.model.Image;
import com.github.dockerjava.core.DefaultDockerClientConfig;
import com.github.dockerjava.httpclient5.ApacheDockerHttpClient;
import com.github.dockerjava.transport.DockerHttpClient;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.MoreExecutors;

import com.lucafaggion.thesis.develop.graph.RunnableGraph;

public class App {
  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) throws IOException {
    // System.out.println(new App().getGreeting());
    // DockerClientConfig config =
    // DefaultDockerClientConfig.createDefaultConfigBuilder().build();
    // DockerHttpClient httpClient = new ApacheDockerHttpClient.Builder()
    // .dockerHost(config.getDockerHost())
    // .sslConfig(config.getSSLConfig())
    // .maxConnections(100)
    // .connectionTimeout(Duration.ofSeconds(5))
    // .responseTimeout(Duration.ofSeconds(5))
    // .build();
    // DockerClient client = DockerClientImpl.getInstance(config, httpClient);
    // try {
    // client.pingCmd().exec();
    // List<Image> images = client.listImagesCmd().exec();
    // System.out.println("Docker is responding");
    // } catch (Exception e) {
    // System.out.println("Docker Not responding");
    // }

    ExecutorService execService = Executors.newSingleThreadExecutor();
    // ListeningExecutorService lExecService =
    // MoreExecutors.listeningDecorator(execService);

    RunnableGraph graph = new RunnableGraph(execService);
    graph.createGraph();
    graph.print();
    graph.performTraversal();
    graph.performRunnableTraversal();

    // execService.shutdown();
  }
}
