/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.lucafaggion.thesis.develop;

import java.io.FileWriter;
import java.io.IOException;
// import java.util.*;
import java.time.Duration;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.function.Function;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;
import org.thymeleaf.context.Context;
import org.thymeleaf.context.IContext;
import org.thymeleaf.spring6.SpringTemplateEngine;

import com.github.dockerjava.core.DockerClientConfig;
import com.github.dockerjava.core.DockerClientImpl;
import com.github.dockerjava.api.DockerClient;
import com.github.dockerjava.api.model.Image;
import com.github.dockerjava.core.DefaultDockerClientConfig;
import com.github.dockerjava.httpclient5.ApacheDockerHttpClient;
import com.github.dockerjava.transport.DockerHttpClient;
import com.google.common.util.concurrent.ListeningExecutorService;
import com.google.common.util.concurrent.MoreExecutors;

import com.lucafaggion.thesis.develop.graph.RunnableGraph;

@SpringBootApplication
public class App {
  public String getGreeting() {
    return "Hello World!";
  }

  public static void main(String[] args) {
    SpringApplication.run(App.class, args);
  }

  // https://mkyong.com/spring-boot/how-to-display-all-beans-loaded-by-spring-boot/#:~:text=In%20Spring%20Boot%2C%20you%20can,loaded%20by%20the%20Spring%20container.
  @Bean
  public CommandLineRunner run(ApplicationContext appContext) throws IOException {
    return args -> {

      FileWriter beanFile = new FileWriter("src/main/resources/beans.txt");
      String[] beans = appContext.getBeanDefinitionNames();
      for (String bean : beans) {
        beanFile.write(bean + " of Type :: " + appContext.getBean(bean).getClass() + "\n");
      }
      beanFile.close();
    };
  }


  @Bean
  public CommandLineRunner templateEngineTest(SpringTemplateEngine templateEngine) throws IOException {
    return args -> {
      HashMap<String, Object> user = new HashMap<String, Object>();
      user.put("name", "lucafaggion");
      
      HashMap<String, Object> mapContext = new HashMap<String, Object>();
      mapContext.put("name", "Testing Name");
      mapContext.put("user", user);

      Context templateContext = new Context(new Locale("en"), mapContext);

      FileWriter templateWriter = new FileWriter("src/main/resources/configs/testconfig_compiled.yaml");
      templateEngine.process("testconfig", templateContext, templateWriter);
    };
  }

  @Bean
  public CommandLineRunner taskRun(ThreadPoolTaskExecutor threadPoolTaskExecutor) {
    return args -> {
      RunnableGraph graph = new RunnableGraph(threadPoolTaskExecutor.getThreadPoolExecutor());
      graph.createGraph();
      graph.performRunnableTraversal();
      System.out.println(getGreeting());
    };
  }

  @Bean
  public CommandLineRunner test(ApplicationContext appContext) throws IOException {
    return args -> {
      // System.out.println(new App().getGreeting());
      // DockerClientConfig config =
      // DefaultDockerClientConfig.createDefaultConfigBuilder().build();
      // DockerHttpClient httpClient = new ApacheDockerHttpClient.Builder()
      // .dockerHost(config.getDockerHost())
      // .sslConfig(config.getSSLConfig())
      // .maxConnections(100)
      // .connectionTimeout(Duration.ofSeconds(5))
      // .responseTimeout(Duration.ofSeconds(5))
      // .build();
      // DockerClient client = DockerClientImpl.getInstance(config, httpClient);
      // try {
      // client.pingCmd().exec();
      // List<Image> images = client.listImagesCmd().exec();
      // System.out.println("Docker is responding");
      // } catch (Exception e) {
      // System.out.println("Docker Not responding");
      // }
    };
  }
}
